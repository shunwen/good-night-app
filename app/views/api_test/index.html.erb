<% content_for :title, "API Test" %>

<div class="container">
  <h1>API Test</h1>

  <div class="section">
    <h2>Auth</h2>
    <div id="auth-status">
      <%= render partial: "auth_status", locals: { user: nil, user_id: nil, sleeps_count: 0, following_count: 0, status: :cleared } %>
    </div>
    <%= form_with url: api_test_impersonate_path, method: :post, local: false do |form| %>
      <%= form.label :user_id, "User ID:" %>
      <%= form.number_field :user_id, value: 1, min: 1 %>
      <%= form.submit "Impersonate" %>
    <% end %>
    <%= button_to "Clear", api_test_clear_auth_path, method: :delete, form: { local: false } %>
  </div>

  <div class="section">
    <h2>Stats</h2>
    <div class="stats">
      <span>Requests: <strong id="total-requests">0</strong></span>
      <span>Avg Time: <strong id="avg-response-time">0ms</strong></span>
      <span>Success: <strong id="success-rate">0%</strong></span>
    </div>
  </div>

  <% @endpoints.each_with_index do |endpoint, index| %>
    <div class="endpoint">
      <div class="endpoint-header">
        <span class="method"><%= endpoint[:method] %></span>
        <span class="url"><%= endpoint[:url] %></span>
        <span class="desc"><%= endpoint[:description] %></span>
      </div>
      
      <% if endpoint[:sample_payload] %>
        <details class="payload">
          <summary>Payload</summary>
          <pre><%= JSON.pretty_generate(endpoint[:sample_payload]) %></pre>
        </details>
      <% end %>
      
      <div class="actions">
        <button onclick="testEndpoint('<%= endpoint[:method] %>', '<%= endpoint[:url] %>', <%= endpoint[:sample_payload]&.to_json || 'null' %>)">
          Test
        </button>
        <button onclick="performanceTest('<%= endpoint[:method] %>', '<%= endpoint[:url] %>', <%= endpoint[:sample_payload]&.to_json || 'null' %>, 10)">
          Perf (10x)
        </button>
      </div>
      
      <div id="result-<%= index %>" class="result hidden">
        <div class="tabs">
          <button class="tab active" onclick="showTab(this, 'summary-<%= index %>')">Summary</button>
          <button class="tab" onclick="showTab(this, 'request-<%= index %>')">Request</button>
          <button class="tab" onclick="showTab(this, 'response-<%= index %>')">Response</button>
        </div>
        <div id="summary-<%= index %>" class="tab-content active">
          <pre class="content"></pre>
        </div>
        <div id="request-<%= index %>" class="tab-content">
          <pre class="content"></pre>
        </div>
        <div id="response-<%= index %>" class="tab-content">
          <pre class="content"></pre>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script>
let performanceStats = {
  totalRequests: 0,
  totalTime: 0,
  successCount: 0
};

// Hotwire handles the impersonation now

function showTab(button, tabId) {
  // Get the parent result container
  const resultContainer = button.closest('.result');
  
  // Hide all tab contents and remove active from buttons
  const allTabs = resultContainer.querySelectorAll('.tab-content');
  const allButtons = resultContainer.querySelectorAll('.tab');
  
  allTabs.forEach(tab => tab.classList.remove('active'));
  allButtons.forEach(btn => btn.classList.remove('active'));
  
  // Show selected tab and mark button as active
  document.getElementById(tabId).classList.add('active');
  button.classList.add('active');
}

function updatePerformanceStats() {
  document.getElementById('total-requests').textContent = performanceStats.totalRequests;
  const avgTime = performanceStats.totalRequests > 0 ? 
    Math.round(performanceStats.totalTime / performanceStats.totalRequests) : 0;
  document.getElementById('avg-response-time').textContent = avgTime + 'ms';
  const successRate = performanceStats.totalRequests > 0 ? 
    Math.round((performanceStats.successCount / performanceStats.totalRequests) * 100) : 0;
  document.getElementById('success-rate').textContent = successRate + '%';
}

async function testEndpoint(method, url, payload) {
  const startTime = performance.now();
  
  // Find result containers
  const resultDiv = document.querySelector(`button[onclick*="${method}"][onclick*="${url}"]`).closest('.endpoint').querySelector('.result');
  const summaryContent = resultDiv.querySelector('#summary-' + resultDiv.id.split('-')[1] + ' .content');
  const requestContent = resultDiv.querySelector('#request-' + resultDiv.id.split('-')[1] + ' .content');
  const responseContent = resultDiv.querySelector('#response-' + resultDiv.id.split('-')[1] + ' .content');
  
  try {
    const options = {
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    };
    
    if (payload && (method === 'POST' || method === 'PATCH')) {
      // Generate unique user name for create operations
      if (payload.user && payload.user.name) {
        const testPayload = JSON.parse(JSON.stringify(payload)); // Deep copy
        const randomSuffix = Math.random().toString(36).substring(2, 8);
        testPayload.user.name = `Test User ${randomSuffix}`; // Always use base name
        options.body = JSON.stringify(testPayload);
      } else {
        options.body = JSON.stringify(payload);
      }
    }
    
    // Show raw request
    let requestText = `${method} ${url} HTTP/1.1
Content-Type: application/json
Accept: application/json
X-CSRF-Token: ${document.querySelector('meta[name="csrf-token"]').getAttribute('content')}`;
    
    if (options.body) {
      requestText += `\nContent-Length: ${options.body.length}\n\n${options.body}`;
    }
    
    requestContent.textContent = requestText;
    
    const response = await fetch(url, options);
    const endTime = performance.now();
    const responseTime = Math.round(endTime - startTime);
    
    let result = '';
    let rawResponseBody = '';
    const contentType = response.headers.get('content-type');
    
    if (contentType && contentType.includes('application/json')) {
      const data = await response.json();
      result = JSON.stringify(data, null, 2);
      rawResponseBody = result;
    } else {
      result = await response.text();
      rawResponseBody = result;
    }
    
    // Show raw response
    let responseText = `HTTP/1.1 ${response.status} ${response.statusText}`;
    for (const [key, value] of response.headers.entries()) {
      responseText += `\n${key}: ${value}`;
    }
    responseText += `\n\n${rawResponseBody}`;
    
    responseContent.textContent = responseText;
    
    // Update performance stats
    performanceStats.totalRequests++;
    performanceStats.totalTime += responseTime;
    if (response.ok) {
      performanceStats.successCount++;
    }
    updatePerformanceStats();
    
    // Display summary
    summaryContent.innerHTML = `Status: ${response.status} ${response.statusText}
Response Time: ${responseTime}ms
Content-Type: ${contentType}

${result}`;
    
    resultDiv.classList.remove('hidden');
    resultDiv.classList.remove('success', 'error');
    resultDiv.classList.add(response.ok ? 'success' : 'error');
    
  } catch (error) {
    const endTime = performance.now();
    const responseTime = Math.round(endTime - startTime);
    
    // Show error in raw response
    responseContent.textContent = `Error: ${error.message}`;
    
    // Update performance stats
    performanceStats.totalRequests++;
    performanceStats.totalTime += responseTime;
    updatePerformanceStats();
    
    // Display error summary
    summaryContent.innerHTML = `Error: ${error.message}
Response Time: ${responseTime}ms`;
    
    resultDiv.classList.remove('hidden');
    resultDiv.classList.remove('success', 'error');
    resultDiv.classList.add('error');
  }
}

async function performanceTest(method, url, payload, iterations) {
  const results = [];
  const button = document.querySelector(`button[onclick*="performanceTest"][onclick*="${method}"][onclick*="${url}"]`);
  const originalText = button.textContent;
  
  for (let i = 0; i < iterations; i++) {
    button.textContent = `Testing... (${i + 1}/${iterations})`;
    const startTime = performance.now();
    
    try {
      const options = {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      };
      
      if (payload && (method === 'POST' || method === 'PATCH')) {
        // Add randomization for create operations to avoid conflicts
        if (payload.user && payload.user.name) {
          const testPayload = JSON.parse(JSON.stringify(payload)); // Deep copy
          const randomSuffix = Math.random().toString(36).substring(2, 8);
          testPayload.user.name = `Test User ${randomSuffix}`; // Always use base name
          options.body = JSON.stringify(testPayload);
        } else {
          options.body = JSON.stringify(payload);
        }
      }
      
      const response = await fetch(url, options);
      const endTime = performance.now();
      const responseTime = Math.round(endTime - startTime);
      
      results.push({
        iteration: i + 1,
        status: response.status,
        responseTime: responseTime,
        success: response.ok
      });
      
      // Update global stats
      performanceStats.totalRequests++;
      performanceStats.totalTime += responseTime;
      if (response.ok) {
        performanceStats.successCount++;
      }
      
    } catch (error) {
      const endTime = performance.now();
      const responseTime = Math.round(endTime - startTime);
      
      results.push({
        iteration: i + 1,
        status: 'Error',
        responseTime: responseTime,
        success: false,
        error: error.message
      });
      
      performanceStats.totalRequests++;
      performanceStats.totalTime += responseTime;
    }
  }
  
  button.textContent = originalText;
  updatePerformanceStats();
  
  // Calculate performance metrics
  const successfulResults = results.filter(r => r.success);
  const avgResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;
  const minResponseTime = Math.min(...results.map(r => r.responseTime));
  const maxResponseTime = Math.max(...results.map(r => r.responseTime));
  const successRate = (successfulResults.length / results.length) * 100;
  
  // Display performance results
  const resultDiv = button.closest('.endpoint').querySelector('.result');
  const resultContent = resultDiv.querySelector('#summary-' + resultDiv.id.split('-')[1] + ' .content');
  
  resultContent.innerHTML = `Performance Test Results (${iterations} iterations):

Success Rate: ${successRate.toFixed(1)}%
Average Response Time: ${Math.round(avgResponseTime)}ms
Min Response Time: ${minResponseTime}ms
Max Response Time: ${maxResponseTime}ms

Individual Results:
${results.map(r => `#${r.iteration}: ${r.status} - ${r.responseTime}ms${r.error ? ` (${r.error})` : ''}`).join('\n')}`;
  
  resultDiv.classList.remove('hidden');
  resultDiv.classList.remove('success', 'warning', 'error');
  resultDiv.classList.add(successRate > 90 ? 'success' : 'warning');
}
</script>

<style>
* { box-sizing: border-box; }
body { margin: 0; padding: 16px; font-family: system-ui, sans-serif; font-size: 14px; line-height: 1.4; }

.container { max-width: 1200px; margin: 0 auto; }
h1 { margin: 0 0 24px 0; font-size: 24px; }
h2 { margin: 16px 0 8px 0; font-size: 16px; }

.section { margin: 16px 0; padding: 12px; border: 1px solid #ddd; border-radius: 4px; }
.stats { display: flex; gap: 16px; flex-wrap: wrap; }
.stats span { font-size: 13px; }

.endpoint { margin: 16px 0; padding: 12px; border: 1px solid #ddd; border-radius: 4px; }
.endpoint-header { display: flex; gap: 8px; align-items: center; margin-bottom: 8px; }
.method { font-weight: bold; font-size: 12px; color: #333; background: #f5f5f5; padding: 2px 6px; border-radius: 3px; }
.url { font-family: monospace; font-size: 12px; color: #666; }
.desc { font-size: 12px; color: #888; }

.payload { margin: 8px 0; }
.payload summary { font-size: 12px; cursor: pointer; }
.payload pre { font-size: 11px; margin: 4px 0; padding: 8px; background: #f9f9f9; border-radius: 3px; overflow-x: auto; }

.actions { margin: 8px 0; }
.actions button { padding: 6px 12px; margin-right: 8px; font-size: 12px; border: 1px solid #ddd; background: #f9f9f9; border-radius: 3px; cursor: pointer; }
.actions button:hover { background: #f0f0f0; }

form { display: flex; gap: 8px; align-items: center; margin: 8px 0; }
form label { font-size: 12px; }
form input { padding: 4px 6px; font-size: 12px; border: 1px solid #ddd; border-radius: 3px; }
form input[type="submit"], form input[type="submit"], button { padding: 4px 8px; font-size: 12px; border: 1px solid #ddd; background: #f9f9f9; border-radius: 3px; cursor: pointer; }

.result { margin-top: 8px; padding: 8px; border: 1px solid #ddd; border-radius: 3px; }
.result.success { background: #f0f9f0; border-color: #90ee90; }
.result.error { background: #fdf0f0; border-color: #ffb3b3; }
.result.warning { background: #fffdf0; border-color: #ffd700; }

.tabs { display: flex; margin-bottom: 8px; }
.tab { padding: 4px 8px; font-size: 11px; border: 1px solid #ddd; background: #f9f9f9; cursor: pointer; border-right: none; }
.tab:first-child { border-radius: 3px 0 0 0; }
.tab:last-child { border-radius: 0 3px 0 0; border-right: 1px solid #ddd; }
.tab.active { background: white; font-weight: bold; }

.tab-content { display: none; }
.tab-content.active { display: block; }
.content { font-size: 11px; font-family: monospace; white-space: pre-wrap; overflow-x: auto; line-height: 1.3; }

.hidden { display: none; }

#auth-status { margin: 8px 0; padding: 8px; border: 1px solid #ddd; border-radius: 3px; font-size: 12px; }
#auth-status.success { background: #f0f9f0; border-color: #90ee90; }
#auth-status.warning { background: #fffdf0; border-color: #ffd700; }

.user-details { margin-top: 4px; font-size: 11px; }
.user-details p { margin: 2px 0; }
</style>